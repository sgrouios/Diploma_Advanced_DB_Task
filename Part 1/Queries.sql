/*--Create database
CREATE DATABASE Diploma_DB_Task

--Switch to database and run script
USE Diploma_DB_Task;
GO

--- DROP ---
DROP DATABASE Diploma_DB_Task;

--Show all tables from current database
SELECT * FROM [Sys].TABLES;*/

-- Select rows from table
--SELECT * FROM LOCATION9802;

-- Delete row
--DELETE FROM LOCATION9802 WHERE LOCATIONID='ACC1021';

-- Run stored procedure
/*EXEC ADD_LOCATION @PLOCID = 'ACC1021', @PLOCNAME = 'Craigieburn', 
@PLOCADDRESS = 'Champion Pde', @PMANAGER = 'John';*/

-- Delete Procedure
-- DROP PROCEDURE IF EXISTS dbo.ADD_LOCATION;

-- Create Procedure
/*CREATE PROCEDURE ADD_LOCATION @PLOCID NVARCHAR(10), 
@PLOCNAME NVARCHAR(50), 
@PLOCADDRESS NVARCHAR(200), 
@PMANAGER NVARCHAR(100) AS
BEGIN

INSERT INTO LOCATION9802 VALUES(@PLOCID, @PLOCNAME, @PLOCADDRESS, @PMANAGER);

END;*/

-- Run ADD_LOCATION stored procedure
EXEC ADD_LOCATION @PLOCID = 'ACC1021', @PLOCNAME = 'Thomo', 
@PLOCADDRESS = 'Champion Pde', @PMANAGER = 'Steve';

GO
DECLARE @LOCID NVARCHAR(10);
EXEC ADD_LOCATION 'ACC1021','Thomo', 'Champion Pde','Steve', @LOCID OUTPUT;
SELECT @LOCID;

DELETE FROM INVENTORY9802 WHERE LOCATIONID = 'ACC1021';
DELETE FROM LOCATION9802 WHERE LOCATIONID='ACC1021';

INSERT INTO INVENTORY9802 VALUES(10002, 'MLB3931', 50);

GO
CREATE PROCEDURE DISPLAY
AS
BEGIN
    SELECT * FROM LOCATION9802;
    SELECT * FROM INVENTORY9802;
    SELECT * FROM PRODUCT9802;  
END

-- Run GET_LOCATION_BY_ID and RETURN Location
GO
DECLARE @LOCATION NVARCHAR(100);
EXEC GET_LOCATION_BY_ID 'MLB3931', @LOCATION OUTPUT;
SELECT @LOCATION;

GO

GO
DECLARE @PRODID INT;
EXEC @PRODID = ADD_PRODUCT 'New Product', 100, 500;
SELECT @PRODID;

GO
DECLARE @LOCID NVARCHAR(MAX);
EXEC ADD_LOCATION 'ACC1021', 'Thomo', 
'Champion Pde','Steve', @LOCID OUTPUT;

EXEC DISPLAY;

DELETE FROM PURCHASEORDER9802 WHERE PRODUCTID > 10001;
DELETE FROM INVENTORY9802 WHERE PRODUCTID > 10001;
DELETE FROM PRODUCT9802 WHERE PRODUCTID > 10001;

--- RESET AUTO-INCREMENT
DBCC CHECKIDENT(PRODUCT9802, RESEED, 10001)

GO

CREATE PROCEDURE PURCHASE_STOCK 
@PPRODID INT, 
@PLOCID NVARCHAR(8), 
@PQTY INT 
AS
BEGIN
    BEGIN TRY
        BEGIN TRAN
            DECLARE @BUYPRICE MONEY;  
                
                IF NOT EXISTS(SELECT * FROM PRODUCT9802 WHERE PRODUCTID = @PPRODID) 
                    THROW 52002, 'Product Doesn''t Exist', 1
                IF NOT EXISTS(SELECT * FROM LOCATION9802 WHERE LOCATIONID = @PLOCID) 
                    THROW 51002, 'Location Doesn''t exist', 1

                SET @BUYPRICE = (SELECT BUYPRICE FROM PRODUCT9802 WHERE PRODUCTID = @PPRODID)

                IF(@BUYPRICE * @PQTY > (SELECT AMOUNT FROM GENERALLEDGER9802 WHERE ITEMID = 1))   
                    THROW 59001, 'INSUFICCIENT CASH', 1 
                
                 INSERT INTO PURCHASEORDER9802 VALUES
                (@PPRODID, @PLOCID, GETDATE(), @PQTY, 
                (@PQTY * @BUYPRICE));

                UPDATE INVENTORY9802 SET NUMINSTOCK = NUMINSTOCK + @PQTY WHERE PRODUCTID = @PPRODID;
                UPDATE GENERALLEDGER9802 SET AMOUNT = AMOUNT - (@PQTY * @BUYPRICE) WHERE ITEMID = 1;
                UPDATE GENERALLEDGER9802 SET AMOUNT = AMOUNT + @PQTY WHERE ITEMID = 2;

        COMMIT TRAN
    END TRY
    BEGIN CATCH
        ROLLBACK TRAN
            IF ERROR_NUMBER()=51002 OR ERROR_NUMBER()=52002 OR ERROR_NUMBER()=59001
                THROW
            ELSE 
                DECLARE @ERRORMSG NVARCHAR(MAX)= ERROR_MESSAGE();
                THROW 50000, @ERRORMSG, 1
    END CATCH
END;

EXEC PURCHASE_STOCK @PPRODID = 10001, @PLOCID = 'MLB391', @PQTY = 700;

EXEC DISPLAY;

UPDATE GENERALLEDGER9802 SET AMOUNT = 60000 WHERE ITEMID = 1
SELECT * FROM PURCHASEORDER9802;
SELECT * FROM GENERALLEDGER9802;
SELECT * FROM PRODUCT9802;

GO


DECLARE @ACCOUNTID INT;
EXEC @ACCOUNTID = ADD_CLIENT_ACCOUNT 'Hello World3', 20000, 60000;
SELECT @ACCOUNTID;

DELETE FROM CLIENTACCOUNT9802 WHERE ACCOUNTID > 30001;
DBCC CHECKIDENT(CLIENTACCOUNT9802, RESEED, 30001)

SELECT * FROM CLIENTACCOUNT9802;
go

EXEC PURCHASE_STOCK
EXEC DISPLAY;
SELECT * FROM PURCHASEORDER9802;
SELECT * FROM GENERALLEDGER9802;
SELECT * FROM PRODUCT9802;
SELECT * FROM AUTHORISEDPERSON9802
SELECT * FROM ACCOUNTPAYMENT9802

EXEC PURCHASE_STOCK 10004, 'ACC1021', 20


DECLARE @ACCTNO INT;
EXEC @ACCTNO = ADD_AUTHORISED_PERSON 'Stephen', 'Grouios', 'the@hotmail.com', 'password', 30001
SELECT @ACCTNO;

GO
DELETE FROM AUTHORISEDPERSON9802 WHERE ACCOUNTID > 50001

SELECT MAX(PRODUCTID) FROM PRODUCT9802


GO
ALTER PROCEDURE GET_PRODUCT_BY_ID 
@PPRODID INT,
@PRODUCT CURSOR VARYING OUTPUT
AS
BEGIN
    BEGIN TRY
            IF EXISTS (SELECT * FROM PRODUCT9802 WHERE PRODUCTID = @PPRODID)
                BEGIN
                    SET @PRODUCT = CURSOR FOR SELECT * 
                    FROM PRODUCT9802 WHERE PRODUCTID = @PPRODID
                    OPEN @PRODUCT
                END
            ELSE
                THROW 52002, 'Product Doesn''t exist', 1
    END TRY
    BEGIN CATCH
            IF ERROR_NUMBER()=52002
                THROW
            ELSE
                BEGIN
                    DECLARE @ERRORMSG NVARCHAR(MAX) = ERROR_MESSAGE(); 
                        THROW 50000, @ERRORMSG, 1
                END
    END CATCH
END
---------------------------------------
GO
CREATE PROCEDURE GET_LOCATION_BY_ID 
@PLOCID NVARCHAR(8),
@LOCATION CURSOR VARYING OUTPUT
AS
BEGIN
    BEGIN TRY
        IF EXISTS (SELECT LOCNAME, [ADDRESS]
            FROM LOCATION9802
            WHERE LOCATIONID = @PLOCID)     
            BEGIN           
                SET @LOCATION = CURSOR FOR SELECT * 
                FROM LOCATION9802 WHERE LOCATIONID = @PLOCID;
                OPEN @LOCATION;
            END
        ELSE
            BEGIN
                ;THROW 51002, 'Location Doesn''t Exist', 1
            END
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() = 51002
            THROW;
        ELSE
            DECLARE @ERRORMSG NVARCHAR(MAX)= ERROR_MESSAGE();
            THROW 50000, @ERRORMSG, 1;
    END CATCH
END

DECLARE @LOCID NVARCHAR(8);
DECLARE @LOCNAME NVARCHAR(50);
DECLARE @ADDRESS NVARCHAR(100);
DECLARE @MANAGER NVARCHAR(100);

DECLARE @MY_CURSOR CURSOR;
EXEC GET_LOCATION_BY_ID @PLOCID = ACC1021, @LOCATION = @MY_CURSOR OUTPUT;
FETCH NEXT FROM @MY_CURSOR
INTO @LOCID, @LOCNAME, @ADDRESS, @MANAGER;

SELECT @LOCID, @LOCNAME, @ADDRESS, @MANAGER;
SELECT * FROM LOCATION9802
------------------------------------
DECLARE @PRODUCTID INT;
DECLARE @PRODNAME NVARCHAR(100);
DECLARE @BUYPRICE MONEY;
DECLARE @SELLPRICE MONEY;
DECLARE @MY_CURSOR CURSOR;

EXEC GET_PRODUCT_BY_ID @PPRODID = 10004, @PRODUCT = @MY_CURSOR OUTPUT;
FETCH NEXT FROM @MY_CURSOR
INTO @PRODUCTID, @PRODNAME, @BUYPRICE, @SELLPRICE;

BEGIN
    PRINT 'Product ID: ' + CAST(@PRODUCTID AS NVARCHAR)
    + N'Product name: ' + @PRODNAME + N'Buy price: $' + 
    CAST(@BUYPRICE AS NVARCHAR) +
    N'Sell price: $' + CAST(@SELLPRICE AS NVARCHAR)
END

CLOSE @MY_CURSOR;
DEALLOCATE @MY_CURSOR;

SELECT * FROM PRODUCT9802
    
SELECT * FROM CLIENTACCOUNT9802
DELETE FROM CLIENTACCOUNT9802 WHERE ACCOUNTID = 30002
DBCC CHECKIDENT(CLIENTACCOUNT9802, RESEED, 30001)

EXEC ADD_CLIENT_ACCOUNT 'NewAccount', 10000, 200000

USE Diploma_DB_Task
SELECT * FROM ACCOUNTPAYMENT9802
SELECT * FROM CLIENTACCOUNT9802
SELECT * FROM GENERALLEDGER9802
GO
ALTER PROCEDURE MAKE_ACCOUNT_PAYMENT 
@PACCOUNTID INT, 
@PAMOUNT MONEY 
AS
BEGIN
    BEGIN TRAN
        BEGIN TRY

            INSERT INTO ACCOUNTPAYMENT9802
            VALUES (@PACCOUNTID, GETDATE(), @PAMOUNT)

            UPDATE CLIENTACCOUNT9802 SET BALANCE = BALANCE - @PAMOUNT
            WHERE ACCOUNTID = @PACCOUNTID 

            UPDATE GENERALLEDGER9802 SET AMOUNT = AMOUNT - @PAMOUNT
            WHERE ITEMID = 3

            UPDATE GENERALLEDGER9802 SET AMOUNT = AMOUNT + @PAMOUNT
            WHERE ITEMID = 1

            COMMIT TRAN
        END TRY
    BEGIN CATCH
        ROLLBACK TRAN
        IF ERROR_NUMBER()=547
            BEGIN 
                IF @PAMOUNT < 0
                    THROW 53004, 'ACCOUNT PAYMENT MUST BE POSITIVE', 1
                ELSE
                    THROW 53002, 'ACCOUNT DOES NOT EXIST', 1   
            END
        ELSE
            DECLARE @ERROR_MSG NVARCHAR(MAX) = ERROR_MESSAGE();
            THROW 50000, @ERROR_MSG, 1;
    END CATCH
END;

SELECT * FROM ACCOUNTPAYMENT9802
SELECT * FROM CLIENTACCOUNT9802
SELECT * FROM GENERALLEDGER9802
EXEC MAKE_ACCOUNT_PAYMENT @PACCOUNTID = 3000, @PAMOUNT = 50
SELECT * FROM ACCOUNTPAYMENT9802
SELECT * FROM CLIENTACCOUNT9802
SELECT * FROM GENERALLEDGER9802

DELETE FROM ACCOUNTPAYMENT9802 WHERE 
ACCOUNTID = 30001 AND 
DATETIMERECEIVED = '2020-05-13 16:55:47.567'
GO

CREATE PROCEDURE GET_CLIENT_ACCOUNT_BY_ID 
@PACCOUNTID INT,
@MYCURSOR CURSOR VARYING OUTPUT 
AS
BEGIN
    BEGIN TRY
        BEGIN
            IF NOT EXISTS (SELECT * FROM CLIENTACCOUNT9802 
            WHERE ACCOUNTID = @PACCOUNTID)
                THROW 53002, 'ACCOUNT DOES NOT EXIST', 1
            ELSE    
                SET @MYCURSOR = CURSOR FOR 
                SELECT CLIENTACCOUNT9802.ACCOUNTID, ACCTNAME, 
                BALANCE, CREDITLIMIT, USERID, FIRSTNAME, SURNAME, EMAIL
                FROM CLIENTACCOUNT9802 INNER JOIN AUTHORISEDPERSON9802
                ON CLIENTACCOUNT9802.ACCOUNTID = AUTHORISEDPERSON9802.ACCOUNTID
                WHERE CLIENTACCOUNT9802.ACCOUNTID = @PACCOUNTID

                OPEN @MYCURSOR;
        END
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER()=53002
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMSG NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMSG, 1
            END    
    END CATCH
END;

GO
DECLARE @MYCURSOR CURSOR;
DECLARE @ACCTID INT;
DECLARE @ACCTNAME NVARCHAR(MAX);
DECLARE @BALANCE MONEY;
DECLARE @CREDIT MONEY;
DECLARE @USERID INT;
DECLARE @FIRSTNAME NVARCHAR(100);
DECLARE @SURNAME NVARCHAR(100);
DECLARE @EMAIL NVARCHAR(100);
EXEC GET_CLIENT_ACCOUNT_BY_ID 30001;
FETCH NEXT FROM @MYCURSOR INTO
@ACCTID, @ACCTNAME, @BALANCE, @CREDIT, @USERID, 
@FIRSTNAME, @SURNAME,@EMAIL
SELECT @ACCTID, @ACCTNAME, @BALANCE, @CREDIT, @USERID, 
@FIRSTNAME, @SURNAME,@EMAIL


SELECT * FROM CLIENTACCOUNT9802
SELECT * FROM AUTHORISEDPERSON9802


GO
CREATE PROCEDURE CREATE_ORDER  
@PSHIPPINGADDRESS NVARCHAR(200),
@PUSERID INT 
AS
BEGIN
    BEGIN TRAN
        BEGIN TRY

            INSERT INTO ORDER9802 (SHIPPINGADDRESS, DATETIMECREATED, TOTAL, USERID)
            VALUES(@PSHIPPINGADDRESS, GETDATE(), 0, @PUSERID)
            
            COMMIT TRAN

            RETURN @@IDENTITY;

        END TRY
        BEGIN CATCH
            ROLLBACK TRAN
                IF ERROR_NUMBER()=547
                    THROW 55002, 'USER DOES NOT EXIST', 1
                ELSE
                    BEGIN
                        DECLARE @ERRORMSG NVARCHAR(MAX) = ERROR_MESSAGE();
                        THROW 50000, @ERRORMSG, 1
                    END 
        END CATCH
END;
DECLARE @NUM INT;
EXEC @NUM = CREATE_ORDER @PSHIPPINGADDRESS = 'Whatever', @PUSERID = 50001;
SELECT @NUM;
SELECT * FROM ORDER9802
DELETE FROM ORDER9802 WHERE ORDERID > 70001;
SELECT * FROM AUTHORISEDPERSON9802
DBCC CHECKIDENT(ORDER9802, RESEED, 70001)

GO
CREATE PROCEDURE GET_ORDER_BY_ID 
@PORDERID INT,
@ORDERDETAILS CURSOR VARYING OUTPUT
AS
BEGIN
    BEGIN TRY
        IF EXISTS (SELECT * FROM ORDER9802 WHERE ORDERID = @PORDERID)
        BEGIN
            SET @ORDERDETAILS = CURSOR FOR
            SELECT ORDER9802.*, ORDERLINE9802.PRODUCTID, 
            ORDERLINE9802.QUANTITY, ORDERLINE9802.DISCOUNT,
            ORDERLINE9802.SUBTOTAL FROM ORDER9802 INNER JOIN
            ORDERLINE9802 ON ORDER9802.ORDERID = ORDERLINE9802.ORDERID
            WHERE ORDER9802.ORDERID = 70001; 

            OPEN @ORDERDETAILS;
        END
        ELSE
            THROW 54002, 'ORDER DOES NOT EXIST', 1  
    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER()=54002
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMSG NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMSG, 1
            END    
    END CATCH  
END;

DECLARE @MYCURSOR CURSOR;
EXEC GET_ORDER_BY_ID 70001, @MYCURSOR OUTPUT;


SELECT * FROM ORDER9802
SELECT * FROM ORDERLINE9802
SELECT * FROM PRODUCT9802

DELETE FROM ORDERLINE9802 WHERE PRODUCTID > 10001
GO
ALTER PROCEDURE ADD_PRODUCT_TO_ORDER 
@PORDERID INT, 
@PPRODIID INT, 
@PQTY INT, 
@DISCOUNT DECIMAL 
AS
BEGIN
    BEGIN TRAN
        BEGIN TRY

            DECLARE @SUBTOTAL MONEY;

            IF (SELECT DATETIMEDISPATCHED FROM ORDER9802 
            WHERE ORDERID = @PORDERID) IS NULL
                IF EXISTS (SELECT PRODUCTID FROM PRODUCT9802 
                WHERE PRODUCTID = @PPRODIID)
                    IF NOT EXISTS (SELECT * FROM ORDERLINE9802 
                    WHERE ORDERID = @PORDERID AND PRODUCTID = @PPRODIID)
                        BEGIN
                            SET @SUBTOTAL = (@PQTY * 
                            (SELECT SELLPRICE FROM PRODUCT9802 
                            WHERE PRODUCTID = @PPRODIID)) * (1 - @DISCOUNT);

                            INSERT INTO ORDERLINE9802 VALUES
                            (@PORDERID, @PPRODIID, @PQTY, @DISCOUNT, @SUBTOTAL)

                            UPDATE ORDER9802 SET TOTAL += @SUBTOTAL WHERE ORDERID = @PORDERID
   
                        END
                    ELSE
                        BEGIN
                            SET @SUBTOTAL = (@PQTY * 
                            (SELECT SELLPRICE FROM PRODUCT9802 
                            WHERE PRODUCTID = @PPRODIID)) * (1 - @DISCOUNT);
                            
                            UPDATE ORDERLINE9802 SET QUANTITY += @PQTY, SUBTOTAL += @SUBTOTAL
                            WHERE ORDERID = @PORDERID AND PRODUCTID = @PPRODIID;

                            UPDATE ORDER9802 SET TOTAL += @SUBTOTAL WHERE ORDERID = @PORDERID;
                        END
                    ELSE
                        THROW 52002, 'PRODUCT DOES NOT EXIST', 1

            ELSE
                THROW 54002, 'ORDER HAS ALREADY BEEN FULFILLED', 1

            COMMIT TRAN
        END TRY
        BEGIN CATCH
            ROLLBACK TRAN
                IF ERROR_NUMBER()=54002 OR ERROR_NUMBER()=52002
                    THROW
                IF ERROR_NUMBER()=547
                    BEGIN
                        IF NOT EXISTS (SELECT ORDERID FROM ORDER9802 WHERE ORDERID = @PORDERID)
                            THROW 54002, 'ORDER DOES NOT EXIST', 1
                        ELSE IF (@DISCOUNT < 0 OR @DISCOUNT > 0.25)
                            THROW 54004, 'DISCOUNT OUT OF RANGE', 1
                    END
                ELSE
                    BEGIN
                        DECLARE @ERRORMSG NVARCHAR(MAX) = ERROR_MESSAGE();
                        THROW 50000, @ERRORMSG, 1
                    END           
        END CATCH
END;

EXEC ADD_PRODUCT_TO_ORDER 70002, 10002, 2, 5;
EXEC ADD_PRODUCT_TO_ORDER 70002, 10002, 2, 0;
DECLARE @PRODID INT;
EXEC @PRODID = ADD_PRODUCT 'Samsung Galaxy', 100, 500;
EXEC CREATE_ORDER '13 Banksia Avenue', 50001

SELECT * FROM ORDER9802
SELECT * FROM ORDERLINE9802
EXEC ADD_PRODUCT_TO_ORDER 70002, 10002, 2, 0;
SELECT * FROM ORDER9802
SELECT * FROM ORDERLINE9802

IF NOT EXISTS (SELECT ORDERID FROM ORDER9802 WHERE ORDERID = 7001)
    PRINT 'DOES NOT EXIST'
ELSE
    PRINT 'EXIST'

UPDATE ORDER9802 SET TOTAL += 1000 WHERE ORDERID = 70002
GO
CREATE PROCEDURE REMOVE_PRODUCT_FROM_ORDER 
@PORDERID INT, 
@PPRODIID INT 
AS
BEGIN
    BEGIN TRAN
        BEGIN TRY

            IF NOT EXISTS (SELECT * FROM ORDER9802 WHERE ORDERID = @PORDERID)
                THROW 54002, 'ORDER DOES NOT EXIST', 1

            IF (SELECT DATETIMEDISPATCHED FROM ORDER9802 
            WHERE ORDERID = @PORDERID) IS NOT NULL
                THROW 54002, 'ORDER HAS ALREADY BEEN FULFILLED', 1
            
            IF NOT EXISTS (SELECT PRODUCTID FROM PRODUCT9802 WHERE PRODUCTID = @PPRODIID)
                THROW 52002, 'PRODUCT DOES NOT EXIST', 1

            IF NOT EXISTS (SELECT * FROM ORDERLINE9802 
            WHERE ORDERID = @PORDERID AND PRODUCTID = @PPRODIID)
                THROW 54005, 'PRODUCT NOT ON ORDER', 1
                    
                    DECLARE @SUBTOTAL MONEY = (SELECT SUBTOTAL FROM 
                    ORDERLINE9802 WHERE ORDERID = @PORDERID AND PRODUCTID = @PPRODIID);

                    UPDATE ORDER9802 SET TOTAL -= @SUBTOTAL WHERE ORDERID = @PORDERID

                    DELETE FROM ORDERLINE9802 WHERE ORDERID = @PORDERID AND PRODUCTID = @PPRODIID

        COMMIT TRAN
        END TRY
        BEGIN CATCH
            ROLLBACK TRAN
                IF ERROR_NUMBER()=54002 OR ERROR_NUMBER()=52002 OR ERROR_NUMBER()=54005
                    THROW
                ELSE
                    BEGIN
                        DECLARE @ERRORMSG NVARCHAR(MAX) = ERROR_MESSAGE();
                        THROW 50000, @ERRORMSG, 1
                    END           
        END CATCH
END;
GO

DECLARE @PRODID INT;
EXEC @PRODID = ADD_PRODUCT 'LG', 100, 500;

SELECT * FROM ORDER9802
SELECT * FROM ORDERLINE9802
EXEC ADD_PRODUCT_TO_ORDER 70002, 10001, 2, 0
SELECT * FROM ORDER9802
SELECT * FROM ORDERLINE9802

EXEC REMOVE_PRODUCT_FROM_ORDER 70002, 10002

DECLARE @SUBTOTAL MONEY = (SELECT SUBTOTAL FROM 
ORDERLINE9802 WHERE ORDERID = 70001 AND PRODUCTID = 10001);
SELECT @SUBTOTAL

GO
CREATE PROCEDURE GET_OPEN_ORDERS 
@ORDERS CURSOR VARYING OUTPUT
AS
BEGIN
    BEGIN TRY
        SET @ORDERS = CURSOR FOR SELECT * FROM ORDER9802 
        WHERE DATETIMEDISPATCHED IS NULL;

        OPEN @ORDERS;
    END TRY
    BEGIN CATCH
        DECLARE @ERRORMSG NVARCHAR(MAX ) = ERROR_MESSAGE();
        THROW 50000, @ERRORMSG, 1 
    END CATCH

END;

GO
DECLARE @ORDERS CURSOR;
DECLARE @ORDERID INT;
DECLARE @SHIPPING NVARCHAR(MAX);
DECLARE @DATECREATED DATETIME;
DECLARE @DATEDISPATCHED DATETIME;
DECLARE @TOTAL MONEY;
DECLARE @USERID INT;
EXEC GET_OPEN_ORDERS @ORDERS OUTPUT;


FETCH NEXT FROM @ORDERS INTO 
@ORDERID, @SHIPPING, @DATECREATED, @DATEDISPATCHED,
@TOTAL, @USERID;

SELECT @ORDERID, @SHIPPING, @DATECREATED, @DATEDISPATCHED,
@TOTAL, @USERID;

SELECT * FROM ORDER9802 WHERE DATETIMEDISPATCHED IS NULL 

select DATETIMEDISPATCHED FROM ORDER9802 WHERE ORDERID = 70002

GO
CREATE PROCEDURE FULLFILL_ORDER 
@PORDERID INT 
AS
BEGIN
    BEGIN TRAN
        BEGIN TRY

            IF NOT EXISTS (SELECT * FROM ORDER9802 WHERE ORDERID = @PORDERID)
                THROW 54002, 'ORDER DOES NOT EXIST', 1

            IF (SELECT DATETIMEDISPATCHED FROM ORDER9802 
            WHERE ORDERID = @PORDERID) IS NOT NULL
                THROW 54002, 'ORDER HAS ALREADY BEEN FULFILLED', 1

            DECLARE @ACCOUNTID INT = (SELECT ACCOUNTID FROM AUTHORISEDPERSON9802 
            INNER JOIN ORDER9802 ON AUTHORISEDPERSON9802.USERID = 
            ORDER9802.USERID WHERE ORDERID = @PORDERID)

            UPDATE ORDER9802 SET DATETIMEDISPATCHED = GETDATE()
            WHERE ORDERID = @PORDERID;

            DECLARE @PRODUCTS CURSOR;
            SET @PRODUCTS = CURSOR FOR SELECT PRODUCTID, QUANTITY, SUBTOTAL FROM ORDERLINE9802 
            WHERE ORDERID = @PORDERID;

            DECLARE @CURRENTPRODUCT INT;
            DECLARE @QUANTITY INT;
            DECLARE @SUBTOTAL MONEY;
            OPEN @PRODUCTS;
            FETCH NEXT FROM @PRODUCTS INTO @CURRENTPRODUCT, @QUANTITY, @SUBTOTAL;

            WHILE @@FETCH_STATUS=0
                BEGIN
                    DECLARE @LOCID NVARCHAR(8) = (SELECT TOP 1 LOCATIONID FROM INVENTORY9802 
                    WHERE PRODUCTID = @CURRENTPRODUCT
                    ORDER BY NUMINSTOCK DESC);

                    UPDATE INVENTORY9802 SET NUMINSTOCK -= @QUANTITY
                    WHERE PRODUCTID = @CURRENTPRODUCT AND
                    LOCATIONID = @LOCID;

                    UPDATE CLIENTACCOUNT9802 SET BALANCE += @SUBTOTAL WHERE ACCOUNTID = @ACCOUNTID;

                    UPDATE GENERALLEDGER9802 SET AMOUNT += @SUBTOTAL WHERE ITEMID = 3;

                    UPDATE GENERALLEDGER9802 SET AMOUNT -= @QUANTITY * 
                    (SELECT BUYPRICE FROM PRODUCT9802 WHERE PRODUCTID = @CURRENTPRODUCT) 
                    WHERE ITEMID = 2;

                    FETCH NEXT FROM @PRODUCTS INTO @CURRENTPRODUCT, @QUANTITY, @SUBTOTAL; 
                END

            COMMIT TRAN
        END TRY
        BEGIN CATCH
            ROLLBACK TRAN
                IF ERROR_NUMBER()=54002
                    THROW
                ELSE IF ERROR_NUMBER()=547
                    BEGIN
                        IF((SELECT NUMINSTOCK FROM INVENTORY9802 WHERE LOCATIONID = @LOCID 
                        AND PRODUCTID = @CURRENTPRODUCT) < @QUANTITY)
                            THROW 54006, 'UNSUFFICIENT INVENTORY TO FULFILL', 1

                        IF(SELECT BALANCE FROM CLIENTACCOUNT9802 WHERE ACCOUNTID = @ACCOUNTID) 
                        + (SELECT TOTAL FROM ORDER9802 WHERE ORDERID = @PORDERID)
                        > (SELECT CREDITLIMIT FROM CLIENTACCOUNT9802 
                        WHERE ACCOUNTID = @ACCOUNTID)
                            THROW 53005, 'CLIENT ACCOUNT DOES NOT HAVE SUFFICIENT 
                            CREDIT REMAINING TO PAY FOR ORDER', 1
                    END
                ELSE 
                    DECLARE @ERRORMSG NVARCHAR(MAX) = ERROR_MESSAGE();
                    THROW 50000, @ERRORMSG, 1 
        END CATCH
END;

GO
USE Diploma_DB_Task
SELECT * FROM INVENTORY9802
SELECT * FROM ORDER9802
SELECT * FROM CLIENTACCOUNT9802
SELECT * FROM GENERALLEDGER9802
EXEC FULLFILL_ORDER 70002
SELECT * FROM INVENTORY9802
SELECT * FROM ORDER9802
SELECT * FROM CLIENTACCOUNT9802
select * from PURCHASEORDER9802
use Diploma_DB_Task
SELECT * FROM LOCATION9802

SELECT * FROM PURCHASEORDER9802
SELECT * FROM INVENTORY9802
SELECT * FROM PRODUCT9802

SELECT * FROM AUTHORISEDPERSON9802

SELECT * FROM ACCOUNTPAYMENT9802
SELECT * FROM CLIENTACCOUNT9802

/*ADD_PRODUCT_TO_ORDER WHERE IT HAS NOT BEEN DISPATCHED*/
USE Diploma_DB_Task
SELECT * FROM ORDER9802 WHERE ORDERID = 70005
SELECT * FROM ORDERLINE9802 WHERE ORDERID = 70005
SELECT * FROM PRODUCT9802 WHERE PRODUCTID = 10001
GO
EXEC ADD_PRODUCT_TO_ORDER @PORDERID = 70005, 
@PPRODIID = 10001, @PQTY = 1, @DISCOUNT = 0

DELETE FROM ORDERLINE9802 WHERE ORDERID = 70005
UPDATE ORDER9802 SET TOTAL = 0 WHERE ORDERID = 70005

DECLARE @SUBTOTAL MONEY = (1 * 1295) * (1 - 0.5);
SELECT @SUBTOTAL;

SELECT SELLPRICE FROM PRODUCT9802 
WHERE PRODUCTID = 10001

DECLARE @TEST DECIMAL (3,2) = 0.25;
SELECT @TEST;

SELECT * FROM INVENTORY9802 WHERE LOCATIONID = 'NEWLOC';
SELECT * FROM LOCATION9802
SELECT * FROM PRODUCT9802
SELECT * FROM INVENTORY9802 WHERE PRODUCTID = 10008

SELECT * FROM PURCHASEORDER9802 WHERE PRODUCTID = 10005 AND LOCATIONID = 'POO101'
SELECT * FROM INVENTORY9802 WHERE PRODUCTID = 10005 AND LOCATIONID = 'POO101'
SELECT * FROM GENERALLEDGER9802

select * FROM CLIENTACCOUNT9802
SELECT * FROM AUTHORISEDPERSON9802

SELECT CLIENTACCOUNT9802.ACCOUNTID, ACCTNAME, 
BALANCE, CREDITLIMIT, USERID, FIRSTNAME, SURNAME, EMAIL
FROM CLIENTACCOUNT9802 INNER JOIN AUTHORISEDPERSON9802
ON CLIENTACCOUNT9802.ACCOUNTID = AUTHORISEDPERSON9802.ACCOUNTID
WHERE CLIENTACCOUNT9802.ACCOUNTID = 30001

SELECT CLIENTACCOUNT9802.ACCOUNTID, ACCTNAME, 
BALANCE, CREDITLIMIT, NULL AS USERID,  NULL AS FIRSTNAME,
NULL AS SURNAME, NULL AS EMAIL FROM CLIENTACCOUNT9802 WHERE 
ACCOUNTID = 30001;

SELECT * FROM ACCOUNTPAYMENT9802 WHERE ACCOUNTID = 30001
SELECT * FROM CLIENTACCOUNT9802  WHERE ACCOUNTID = 30001
SELECT * FROM GENERALLEDGER9802

USE Diploma_DB_Task
SELECT * FROM ORDER9802 WHERE ORDERID = 70005
SELECT * FROM ORDERLINE9802 WHERE ORDERID = 70005
SELECT * FROM INVENTORY9802 WHERE PRODUCTID = 10001 AND LOCATIONID = 'MLB3931'
SELECT * FROM CLIENTACCOUNT9802 WHERE ACCOUNTID = 30001
SELECT * FROM AUTHORISEDPERSON9802 WHERE ACCOUNTID = 30001
SELECT * FROM GENERALLEDGER9802

SELECT * FROM ORDER9802 WHERE ORDERID = 70006
SELECT * FROM ORDERLINE9802 WHERE ORDERID = 70006





